// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  userId    String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  userId42 Int    @unique
  login    String @unique
  email    String @unique
  url      String @unique
  username String @unique

  firstName String?
  lastName  String?

  chatUsers  ChatUser[]
  stats_user stats_user[]

  channelUsers ChannelUser[]

  @@map("users")
  @@unique([userId, login])
}

model Channel {
  channelId String @id @default(uuid())
  createdAt DateTime @default(now())

  channelName String @unique
  createdBy String
  password String?

  channelUsers ChannelUser[]
  @@map("channels")
}

model ChannelUser {
  channelUserId String @id @default(uuid())

  channel_channelUser_link Channel @relation(fields:[channelId], references: [channelId], onDelete: Cascade)
  channelId String
  user_channelUser_link User @relation(fields:[userId], references: [userId], onDelete: Cascade)
  userId String
  @@unique([channelId, userId, leaveAt])

  joinedAt DateTime @default(now())
  isOwner Boolean @default(false)
  isAdmin Boolean @default(false)
  isBanned Boolean @default(false)
  mutedUntill DateTime?
  leaveAt DateTime?

  channelUserMessages ChannelUserMessage[]
  @@map("channel_users")
}

model ChannelUserMessage {
  channelMessageId String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  message String

  channelUser_channelUserMessage_link ChannelUser @relation(fields:[channelUserId], references: [channelUserId], onDelete: Cascade)
  channelUserId String

  @@map("channel_messages")
}


model Chat {
  chatId String @id @default(uuid())
  createdAt DateTime @default(now())

  chatUsers ChatUser[]

  @@map("chats")
}

model ChatUser {
  chatUserId String @id @default(uuid())

  chat_chatUser_link Chat @relation(fields:[chatId], references: [chatId], onDelete: Cascade)
  chatId String
  user_chatUser_link User @relation(fields:[userId], references: [userId], onDelete: Cascade)
  userId String

  chatUserMessages ChatUserMessage[]

  @@map("chat_users")
}

model ChatUserMessage {
  chatMessageId String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  message String

  chatUser_chatUserMessage_link ChatUser @relation(fields: [chatUserId], references: [chatUserId], onDelete: Cascade)
  chatUserId                    String

  @@map("chat_user_messages")
}

model stats_user {
  userId_link  User   @relation(fields: [userId, login], references: [userId, login], onDelete: Cascade)
  userId       String @id 
  login        String 
  gamesWin     Int    @default(0)
  gamesLose    Int    @default(0)
  gamesDraw    Int    @default(0)
  goalsFavor   Int    @default(0)
  goalsAgainst Int    @default(0)
  disconect    Int    @default(0)
  points       Int    @default(0)

  @@map("stats_user")
}
