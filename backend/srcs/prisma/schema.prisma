// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  userId    String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  userId42 Int    @unique
  login    String @unique
  email    String @unique
  url      String @unique
  username String @unique

  firstName String?
  lastName  String?

  avatar String?

  chatUsers ChatUser[]
  stats_user stats_user[]

  twofa       Boolean @default(false)
  twofa_code  String

  // Esto no son campos, son relaciones que necesita el prisma para poderse montar su visualizador.
  // De verdad, no imagiinarse esto como un campo que tiene contenido, sino como una "puerta" que te lleva
  // a la tabla BannedList.
  banning_users BannedList[] @relation("banning_user")
  banned_user BannedList[] @relation("banned_user")
  blocker BlockedList[] @relation("blocker")
  blockedUsers BlockedList[] @relation("blocked")

  channelUsers ChannelUser[]

  role    Role @default(USER)

  @@map("users")
  @@unique([userId, login])
}

enum Role {
  USER
  ADMIN
  OWNER
}

model BannedList {
  banListId String @id @default(uuid())

  banning_user User @relation("banning_user", fields:[userId_banning], references: [userId], onDelete: Cascade)
  userId_banning String

  banned_user User @relation("banned_user", fields:[userId_banned], references: [userId], onDelete: Cascade)
  userId_banned String

  @@map("banned_list")
}

model BlockedList {
  BlockedListId String @id @default(uuid())

  blocker User @relation("blocker", fields:[userId_blocker], references: [userId], onDelete: Cascade)
  userId_blocker String

  blocked User @relation("blocked", fields:[userId_blocked], references: [userId], onDelete: Cascade)
  userId_blocked String

  // Aseguramos que no puedan haber entradas iguales
  @@unique([userId_blocker, userId_blocked], name: "block_pair")
  @@map("blocked_list")
}


model Channel {
  channelId String @id @default(uuid())
  createdAt DateTime @default(now())

  channelName String @unique
  createdBy String
  password String?
  avatar String?

  channelUsers ChannelUser[]
  @@map("channels")
}

model ChannelUser {
  channelUserId String @id @default(uuid())

  channel_channelUser_link Channel @relation(fields:[channelId], references: [channelId], onDelete: Cascade)
  channelId String
  user_channelUser_link User @relation(fields:[userId], references: [userId], onDelete: Cascade)
  userId String
  @@unique([channelId, userId, leaveAt])

  joinedAt DateTime @default(now())
  isOwner Boolean @default(false)
  isAdmin Boolean @default(false)
  isBanned Boolean @default(false)
  mutedUntill DateTime?
  leaveAt DateTime?

  channelUserMessages ChannelUserMessage[]
  @@map("channel_users")
}

model ChannelUserMessage {
  channelMessageId String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  message String

  channelUser_channelUserMessage_link ChannelUser @relation(fields:[channelUserId], references: [channelUserId], onDelete: Cascade)
  channelUserId String

  @@map("channel_messages")
}


model Chat {
  chatId String @id @default(uuid())
  createdAt DateTime @default(now())

  chatUsers ChatUser[]

  @@map("chats")
}

model ChatUser {
  chatUserId String @id @default(uuid())

  chat_chatUser_link Chat @relation(fields:[chatId], references: [chatId], onDelete: Cascade)
  chatId String
  user_chatUser_link User @relation(fields:[userId], references: [userId], onDelete: Cascade)
  userId String

  chatUserMessages ChatUserMessage[]

  @@map("chat_users")
}

model ChatUserMessage {
  chatMessageId String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  message String

  chatUser_chatUserMessage_link ChatUser @relation(fields: [chatUserId], references: [chatUserId], onDelete: Cascade)
  chatUserId                    String

  @@map("chat_user_messages")
}

model stats_user {
  userId_link  User   @relation(fields: [userId, login], references: [userId, login], onDelete: Cascade)
  userId       String @id
  login        String
  gamesWin     Int    @default(0)
  gamesLose    Int    @default(0)
  gamesDraw    Int    @default(0)
  goalsFavor   Int    @default(0)
  goalsAgainst Int    @default(0)
  disconect    Int    @default(0)
  points       Int    @default(0)

  @@map("stats_user")
}

model historical_games {
  gameId        String   @id @default(uuid())
  gameDate      DateTime @default(now())
  localId       String
  localName     String
  visitorId     String
  visitorName   String
  localGoals    Int      @default(0)
  visitorGoals  Int      @default(0)
  winLocal      Boolean
  winVisitor    Boolean
  draw          Boolean
  pointsLocal   Int      @default(0)
  pointsVisitor Int      @default(0)
}
