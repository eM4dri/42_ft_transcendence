
version: '3.8'
services:
  dev:
    #    tty: true
    build:
      context: ./backend
      dockerfile: dev-Dockerfile
    container_name: api
    networks:
      - docker_network
    ports:
      - 3000:3000
    environment:
      DB_URL: "${DB_URL}"
      FORTYTWO_CLIENT_ID: "${FORTYTWO_CLIENT_ID}"
      FORTYTWO_CLIENT_SECRET: "${FORTYTWO_CLIENT_SECRET}"
      FORTYTWO_CLIENT_URL: "${FORTYTWO_CLIENT_URL}"
      FORTYTWO_CLIENT_URL_CALLBACK: "${FORTYTWO_CLIENT_URL_CALLBACK}"
      JWT_SECRET: "${JWT_SECRET}"
      JWT_EXPIRES_IN: "${JWT_EXPIRES_IN}"
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "yarn", "healthcheck"]
      interval: 15s
      timeout: 10s
      retries: 5
    volumes:
      - ./backend/srcs:/app/
  db:
    image: postgres:15-alpine
    container_name: "${DB_HOST}"
    networks:
      - docker_network
    expose:
      - "${DB_PORT}"
    environment:
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_DB: "${DB_NAME}"
    restart: on-failure
    volumes:
      - ${DB_VOLUME_PATH}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
  adminer:
    image: adminer
    container_name: adminer
    networks:
      - docker_network
    restart: on-failure
    ports:
      - 8080:8080

networks:
  docker_network:
    driver: bridge
