version: '3.8'
services:
  front:
    build:
      context: ./frontend
      args:
        API_PORT: ${API_PORT}
        WEB_PORT: ${WEB_PORT}
        FORTYTWO_CLIENT_URL: ${FORTYTWO_CLIENT_URL}
        STATIC_IMAGES_URL: ${STATIC_IMAGES_URL}
        HOST: ${HOST}
      dockerfile: Dockerfile
    container_name: web
    networks:
      - docker_network
    ports:
      - "${WEB_PORT}:${WEB_PORT}"

  back:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: api
    networks:
      - docker_network
    ports:
      - "${API_PORT}:${API_PORT}"
    volumes:
      - ${STATIC_IMAGES_VOLUME_PATH}:/app/static_images
    env_file:
      .env
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "yarn", "healthcheck"]
      interval: 15s
      timeout: 10s
      retries: 5

  db:
    image: postgres:15-alpine
    container_name: "${DB_HOST}"
    networks:
      - docker_network
    expose:
      - "${DB_PORT}"
    environment:
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_DB: "${DB_NAME}"
    restart: on-failure
    volumes:
      - ${DB_VOLUME_PATH}:/var/lib/postgresql/data
    healthcheck:

      test: ["CMD", "pg_isready", "-U", "xd", "-d", "xd"]
      interval: 10s
      timeout: 5s
      retries: 5

  # adminer:
  #   image: adminer
  #   container_name: adminer
  #   networks:
  #     - docker_network
  #   restart: on-failure
  #   ports:
  #     - 8080:8080

  # portainer:
  #   image: portainer/portainer-ce:latest
  #   container_name: portainer
  #   networks:
  #     - docker_network
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ${PORTAINER_VOLUME_PATH}:/data
  #   restart: unless-stopped
  #   ports:
  #     - 9000:9000 # http
  #     # - 9443:9443 # https

  nginx:
    image: nginx:latest
    volumes:
      - ./static_images/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ${STATIC_IMAGES_VOLUME_PATH}:/usr/share/nginx/html/static_images
    ports:
      - "${STATIC_IMAGES_PORT}:${STATIC_IMAGES_PORT}" 

networks:
  docker_network:
    driver: bridge
